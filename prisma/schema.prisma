// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String? 
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sessions      Session[]
  boothSessions BoothSession[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BoothSession {
  id           String   @id @default(cuid())
  userId       String?
  userName     String
  userEmail    String
  photoPath    String
  mediaType    String   @default("photo")
  createdAt    DateTime @default(now())
  shared       Boolean  @default(false)
  emailSent    Boolean  @default(false)
  templateUsed String?
  eventName    String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Settings {
  id              String @id @default(cuid())
  eventName       String @default("Photo Booth Event")
  adminEmail      String
  countdownTime   Int    @default(3)
  resetTime       Int    @default(60)
  emailSubject    String @default("Your Photo Booth Picture")
  emailTemplate   String @default("Thank you for using our photo booth! Here's your picture.")
  smtpHost        String
  smtpPort        Int
  smtpUser        String
  smtpPassword    String
  companyName     String @default("BoothBoss")
  companyLogo     String?
  primaryColor    String @default("#3B82F6")
  secondaryColor  String @default("#1E40AF")
  theme           String @default("custom")
  backgroundColor String? 
  borderColor     String?
  buttonColor     String?
  textColor       String?
  notes           String? @db.Text

  // Custom Journey Settings
  customJourneyEnabled Boolean @default(false)
  activeJourneyId     String?  // ID of the currently active journey
  journeyConfig        Json?
  
  // Splash Page Settings
  splashPageEnabled   Boolean @default(false)
  splashPageTitle     String?
  splashPageContent   String?
  splashPageImage     String?
  splashPageButtonText String? @default("Start")

  // Capture Mode Settings
  captureMode            String  @default("photo") // "photo" or "video"
  
  // Photo Mode Settings
  photoOrientation       String  @default("portrait-standard") // portrait-standard, portrait-story, square, landscape-standard, landscape-cinematic
  photoDevice            String  @default("ipad") // ipad, iphone, android, mac, pc
  photoResolution        String  @default("medium") // low, medium, high
  photoEffect            String  @default("none") // none, sepia, black-white, etc.
  printerEnabled         Boolean @default(false)
  aiImageCorrection      Boolean @default(false)
  
  // Video Mode Settings
  videoOrientation       String  @default("portrait-standard") // portrait-standard, portrait-story, square, landscape-standard, landscape-cinematic
  videoDevice            String  @default("ipad") // ipad, iphone, android, mac, pc 
  videoResolution        String  @default("medium") // low, medium, high
  videoEffect            String  @default("none") // none, sepia, black-white, etc.
  videoDuration          Int     @default(10) // in seconds
}

model Journey {
  id        String   @id @default(cuid())
  name      String
  content   String   @db.Text // JSON string of journey pages
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Analytics models start here

model BoothAnalytics {
  id             String          @id @default(cuid())
  sessionId      String          @unique
  boothSessionId String?
  eventType      String          // session_start, session_complete
  timestamp      DateTime        @default(now())
  completedAt    DateTime?
  userAgent      String?
  emailDomain    String?
  durationMs     Int?
  events         BoothEventLog[]
}

model BoothEventLog {
  id          String         @id @default(cuid())
  analyticsId String
  eventType   String
  metadata    String?        // JSON string
  timestamp   DateTime       @default(now())
  analytics   BoothAnalytics? @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@index([analyticsId])
}