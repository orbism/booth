generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                       String         @id @default(cuid())
  name                     String?
  email                    String         @unique
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  password                 String?
  emailsSent               Int            @default(0)
  industry                 String?
  mediaCount               Int            @default(0)
  organizationName         String?
  organizationSize         String?
  role                     UserRole       @default(CUSTOMER)
  username                 String?        @unique
  resetToken               String?
  resetTokenExpires        DateTime?
  verificationToken        String?
  verificationTokenExpires DateTime?
  onboardingCompleted      Boolean        @default(false)
  subscription             Subscription?
  eventUrls                EventUrl[]
  sessions                 Session[]
  boothSessions            BoothSession[]
  settings                 Settings?
}

model Subscription {
  id                   String               @id @default(cuid())
  userId               String               @unique
  tier                 SubscriptionTier     @default(FREE)
  duration             SubscriptionDuration @default(TRIAL)
  status               SubscriptionStatus   @default(TRIAL)
  startDate            DateTime             @default(now())
  endDate              DateTime             @default(now())
  trialEndDate         DateTime?
  stripeCustomerId     String?              @unique
  stripeSubscriptionId String?
  stripePriceId        String?
  maxMedia             Int                  @default(10)
  maxEmails            Int                  @default(5)
  maxVideoDuration     Int                  @default(10)
  maxDays              Int                  @default(1)
  customDomain         Boolean              @default(false)
  analyticsAccess      Boolean              @default(false)
  filterAccess         Boolean              @default(false)
  videoAccess          Boolean              @default(true)
  aiEnhancement        Boolean              @default(false)
  journeyBuilder       Boolean              @default(false)
  brandingRemoval      Boolean              @default(false)
  prioritySupport      Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventUrl {
  id               String            @id @default(cuid())
  userId           String
  urlPath          String            @unique
  isActive         Boolean           @default(true)
  eventName        String
  eventStartDate   DateTime?
  eventEndDate     DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  boothSessions    BoothSession[]
  eventUrlSettings EventUrlSettings[]

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BoothSession {
  id           String    @id @default(cuid())
  userId       String?
  userName     String
  userEmail    String
  photoPath    String
  createdAt    DateTime  @default(now())
  shared       Boolean   @default(false)
  emailSent    Boolean   @default(false)
  templateUsed String?
  eventName    String?
  mediaType    String?   @default("photo")
  filter       String?   @default("normal")
  eventUrlId   String?
  eventUrlPath String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventUrl     EventUrl? @relation(fields: [eventUrlId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([eventUrlId])
}

model Settings {
  id                   String             @id @default(cuid())
  eventName            String             @default("Photo Booth Event")
  adminEmail           String
  countdownTime        Int                @default(3)
  resetTime            Int                @default(60)
  emailSubject         String             @default("Your Photo Booth Picture")
  emailTemplate        String             @default("Thank you for using our photo booth! Here's your picture.")
  smtpHost             String
  smtpPort             Int
  smtpUser             String
  smtpPassword         String
  companyName          String             @default("Bureau of Internet Culture")
  companyLogo          String?
  primaryColor         String             @default("#3B82F6")
  secondaryColor       String             @default("#1E40AF")
  backgroundColor      String?
  borderColor          String?
  buttonColor          String?
  notes                String?            @db.Text
  textColor            String?
  theme                String             @default("custom")
  customJourneyEnabled Boolean            @default(false)
  journeyConfig        Json?
  activeJourneyId      String?
  splashPageButtonText String?            @default("Start")
  splashPageContent    String?
  splashPageEnabled    Boolean            @default(false)
  splashPageImage      String?
  splashPageTitle      String?
  aiImageCorrection    Boolean            @default(false)
  captureMode          String             @default("photo")
  photoDevice          String             @default("ipad")
  photoEffect          String             @default("none")
  photoOrientation     String             @default("portrait-standard")
  photoResolution      String             @default("medium")
  printerEnabled       Boolean            @default(false)
  videoDevice          String             @default("ipad")
  videoDuration        Int                @default(10)
  videoEffect          String             @default("none")
  videoOrientation     String             @default("portrait-standard")
  videoResolution      String             @default("medium")
  enabledFilters       String?
  filtersEnabled       Boolean            @default(false)
  blobVercelEnabled    Boolean            @default(true)
  createdAt            DateTime           @default(now())
  customCss            String?            @db.Text
  localUploadPath      String             @default("uploads")
  showBoothBossLogo    Boolean            @default(true)
  storageBaseUrl       String?
  storageProvider      String             @default("auto")
  updatedAt            DateTime           @default(now()) @updatedAt
  userId               String?            @unique
  isDefault            Boolean            @default(false)
  user                 User?              @relation(fields: [userId], references: [id])
  eventUrlSettings     EventUrlSettings[]
}

model Journey {
  id        String   @id @default(cuid())
  name      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BoothAnalytics {
  id             String          @id @default(cuid())
  sessionId      String          @unique
  boothSessionId String?
  eventType      String
  timestamp      DateTime        @default(now())
  completedAt    DateTime?
  userAgent      String?
  emailDomain    String?
  durationMs     Int?
  mediaType      String?         @default("photo")
  filter         String?         @default("normal")
  eventUrl       String?
  userId         String?
  events         BoothEventLog[]
}

model BoothEventLog {
  id          String          @id @default(cuid())
  analyticsId String
  eventType   String
  metadata    String?
  timestamp   DateTime        @default(now())
  analytics   BoothAnalytics? @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@index([analyticsId])
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum SubscriptionTier {
  FREE
  BRONZE
  SILVER
  GOLD
  PLATINUM
  ADMIN
}

enum SubscriptionDuration {
  MONTHLY
  QUARTERLY
  ANNUAL
  TRIAL
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
  TRIAL
}

// New junction model for event URL specific settings
model EventUrlSettings {
  id         String   @id @default(cuid())
  eventUrlId String
  settingsId String
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  eventUrl   EventUrl @relation(fields: [eventUrlId], references: [id], onDelete: Cascade)
  settings   Settings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  @@index([eventUrlId])
  @@index([settingsId])
}
